/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package tests

import (
	"fmt"
	"testing"

	"github.com/hyperledger/fabric/common/ledger/testutil"
	protopeer "github.com/hyperledger/fabric/protos/peer"
)

// TestV11 tests that a ledgersData folder created by v1.1 can be used with future releases in a backward compatible way
func TestV11(t *testing.T) {
	fsPath := defaultConfig["peer.fileSystemPath"].(string)
	// this test data was generated by v1.1 code https://gerrit.hyperledger.org/r/#/c/22749/1/core/ledger/kvledger/tests/v11_generate_test.go@22
	testutil.CopyDir("testdata/v11/sample_ledgers/ledgersData", fsPath)
	env := newEnv(defaultConfig, t)
	defer env.cleanup()

	h1, h2 := newTestHelperOpenLgr("ledger1", t), newTestHelperOpenLgr("ledger2", t)
	dataHelper := &v11SampleDataHelper{}

	dataHelper.verifyBeforeStateRebuild(h1)
	dataHelper.verifyBeforeStateRebuild(h2)

	env.closeAllLedgersAndDrop(rebuildableStatedb)
	h1, h2 = newTestHelperOpenLgr("ledger1", t), newTestHelperOpenLgr("ledger2", t)
	dataHelper.verifyAfterStateRebuild(h1)
	dataHelper.verifyAfterStateRebuild(h2)

	env.closeAllLedgersAndDrop(rebuildableStatedb + rebuildableBlockIndex + rebuildableConfigHistory)
	h1, h2 = newTestHelperOpenLgr("ledger1", t), newTestHelperOpenLgr("ledger2", t)
	dataHelper.verifyAfterStateRebuild(h1)
	dataHelper.verifyAfterStateRebuild(h2)
}

// v11SampleDataHelper provides a set of functions to verify the ledger. This verifies the ledger under the assumption that the
// ledger is generated by this code from v1.1 (https://gerrit.hyperledger.org/r/#/c/22749/1/core/ledger/kvledger/tests/v11_generate_test.go@22).
// In summary, the above generate function, constructs two ledgers and populates the ledgers uses this code
// (https://gerrit.hyperledger.org/r/#/c/22749/1/core/ledger/kvledger/tests/util_sample_data.go@55)
type v11SampleDataHelper struct {
}

func (d *v11SampleDataHelper) verifyBeforeStateRebuild(h *testhelper) {
	dataHelper := &v11SampleDataHelper{}
	dataHelper.verifyState(h)
	dataHelper.verifyBlockAndPvtdata(h)
	dataHelper.verifyGetTransactionByID(h)
	dataHelper.verifyConfigHistoryDoesNotExist(h)
}

func (d *v11SampleDataHelper) verifyAfterStateRebuild(h *testhelper) {
	dataHelper := &v11SampleDataHelper{}
	dataHelper.verifyState(h)
	dataHelper.verifyBlockAndPvtdata(h)
	dataHelper.verifyGetTransactionByID(h)
	dataHelper.verifyConfigHistory(h)
}

func (d *v11SampleDataHelper) verifyState(h *testhelper) {
	lgrid := h.lgrid
	h.verifyPubState("cc1", "key1", d.sampleVal("value13", lgrid))
	h.verifyPubState("cc1", "key2", "")
	h.verifyPvtState("cc1", "coll1", "key3", d.sampleVal("value14", lgrid))
	h.verifyPvtState("cc1", "coll1", "key4", "")
	h.verifyPvtState("cc1", "coll2", "key3", d.sampleVal("value09", lgrid))
	h.verifyPvtState("cc1", "coll2", "key4", d.sampleVal("value10", lgrid))

	h.verifyPubState("cc2", "key1", d.sampleVal("value03", lgrid))
	h.verifyPubState("cc2", "key2", d.sampleVal("value04", lgrid))
	h.verifyPvtState("cc2", "coll1", "key3", d.sampleVal("value07", lgrid))
	h.verifyPvtState("cc2", "coll1", "key4", d.sampleVal("value08", lgrid))
	h.verifyPvtState("cc2", "coll2", "key3", d.sampleVal("value11", lgrid))
	h.verifyPvtState("cc2", "coll2", "key4", d.sampleVal("value12", lgrid))
}

func (d *v11SampleDataHelper) verifyConfigHistory(h *testhelper) {
	lgrid := h.lgrid
	h.verifyMostRecentCollectionConfigBelow(10, "cc1",
		&expectedCollConfInfo{5, d.sampleCollConf2(lgrid, "cc1")})

	h.verifyMostRecentCollectionConfigBelow(5, "cc1",
		&expectedCollConfInfo{3, d.sampleCollConf1(lgrid, "cc1")})

	h.verifyMostRecentCollectionConfigBelow(10, "cc2",
		&expectedCollConfInfo{5, d.sampleCollConf2(lgrid, "cc2")})

	h.verifyMostRecentCollectionConfigBelow(5, "cc2",
		&expectedCollConfInfo{3, d.sampleCollConf1(lgrid, "cc2")})
}

func (d *v11SampleDataHelper) verifyConfigHistoryDoesNotExist(h *testhelper) {
	h.verifyMostRecentCollectionConfigBelow(10, "cc1", nil)
	h.verifyMostRecentCollectionConfigBelow(10, "cc2", nil)
}

func (d *v11SampleDataHelper) verifyBlockAndPvtdata(h *testhelper) {
	lgrid := h.lgrid
	h.verifyBlockAndPvtData(2, nil, func(r *retrievedBlockAndPvtdata) {
		r.hasNumTx(2)
		r.hasNoPvtdata()
	})

	h.verifyBlockAndPvtData(4, nil, func(r *retrievedBlockAndPvtdata) {
		r.hasNumTx(2)
		r.pvtdataShouldContain(0, "cc1", "coll1", "key3", d.sampleVal("value05", lgrid))
		r.pvtdataShouldContain(1, "cc2", "coll1", "key3", d.sampleVal("value07", lgrid))
	})
}

func (d *v11SampleDataHelper) verifyGetTransactionByID(h *testhelper) {
	h.verifyTxValidationCode("txid7", protopeer.TxValidationCode_VALID)
	h.verifyTxValidationCode("txid8", protopeer.TxValidationCode_MVCC_READ_CONFLICT)
}

func (d *v11SampleDataHelper) sampleVal(val, ledgerid string) string {
	return fmt.Sprintf("%s:%s", val, ledgerid)
}

func (d *v11SampleDataHelper) sampleCollConf1(ledgerid, ccName string) []*collConf {
	return []*collConf{
		{name: "coll1"},
		{name: ledgerid},
		{name: ccName},
	}
}

func (d *v11SampleDataHelper) sampleCollConf2(ledgerid string, ccName string) []*collConf {
	return []*collConf{
		{name: "coll1"},
		{name: "coll2"},
		{name: ledgerid},
		{name: ccName},
	}
}
