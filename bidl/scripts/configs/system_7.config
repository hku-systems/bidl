# Copyright (c) 2007-2013 Alysson Bessani, Eduardo Alchieri, Paulo Sousa, and the authors indicated in the @author tags
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################################
####### Communication Configurations #######
############################################

#Algorithm to generate secret keys used to generate MACs ('PBKDF2WithHmacSHA1' is the default value)
system.communication.secretKeyAlgorithm = PBKDF2WithHmacSHA1
#Secret keys algorithm provider ('SunJCE' is the default value)
system.communication.secretKeyAlgorithmProvider = SunJCE

#Algorithm used to compute hashes ('SHA-256' is the default value) (MessageDigest)
system.communication.hashAlgorithm = SHA-256
#Hash algorithm provider ('SUN' is the default value)
system.communication.hashAlgorithmProvider = SUN

#Signature algorithm/provider/keyloader used to verify clients requests ('SHA256withECDSA' is the default value).
The algorithm parameter is overwritten in the event that a custom key loader is supplied

# -------- RSA
#https://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunRsaSignProvider
#system.communication.signatureAlgorithm = SHA256withRSA
#system.communication.signatureAlgorithmProvider = SunRsaSign
#system.communication.defaultKeyLoader = RSA

# -------- Elliptic Curve (SunEC)
#system.communication.signatureAlgorithm = SHA256withECDSA
#system.communication.signatureAlgorithmProvider = SunEC
#ystem.communication.defaultKeyLoader = SunEC

# -------- Elliptic Curve (Bouncy Castle)
system.communication.signatureAlgorithm = SHA256withECDSA
system.communication.signatureAlgorithmProvider = BC
system.communication.defaultKeyLoader = ECDSA


#Specify if the communication system should use a thread to send data (true or false)
system.communication.useSenderThread = true

#Force all processes to use the same public/private keys pair and secret key. This is useful when deploying experiments
#and benchmarks, but must not be used in production systems. This parameter will only work with the default key loader.
system.communication.defaultkeys = true

#IP address this replica should bind to. If this parameter does not have a valid ip address,
#the replica will fetch the host address on its own. If config/hosts.config specifies the
#loopback address for the host machine, this parameter is overwritten by that
system.communication.bindaddress = 0.0.0.0

############################################
### Replication Algorithm Configurations ###
############################################

#Number of servers in the group
system.servers.num = 7

#Maximum number of faulty replicas 
system.servers.f = 2

#Timeout to asking for a client request. This value should be greater than the batch timeout
system.totalordermulticast.timeout = 2000000

#Batch timeout. If set to any non-positive integer value, the next consensus instance
#is triggered as soon as (1) the previous one is finished, and (2) any number new requests arrive,
#without waiting to accumulate more requests for the batch. This value should be lower than the request timeout
system.totalordermulticast.batchtimeout = 2000

#Maximum batch size (in number of messages)
system.totalordermulticast.maxbatchsize = 1

#If set to true, the library will iterate randomly through the clients while assembling the next batch, thus ensuring fairness.
#Otherwise, the iteration is done from lowest to highest client ID.
system.totalordermulticast.fairbatch = false

#Number of nonces (for non-determinism actions) generated
system.totalordermulticast.nonces = 10  

#if verification of leader-generated timestamps are increasing 
#it can only be used on systems in which the network clocks are synchronized 
system.totalordermulticast.verifyTimestamps = false

#Quantity of messages that can be stored in the receive queue of the communication system
system.communication.inQueueSize = 500000

# Quantity of messages that can be stored in the send queue of each replica
system.communication.outQueueSize = 500000

#Set to 1 if SMaRt should use signatures, otherwise set to 0 (default is 0).
#To perform replica benchmarking verification without signature creation at clients, set to 2.
system.communication.useSignatures = 0

#Print information about the replica when it is shutdown
system.shutdownhook = true

#Force all replicas to deliver to the application the same number of requests per batch.
#This is not the same batch used during the ordering protocol
system.samebatchsize = false

#Size of the thread pool that transmits replies to clients. 
#If set to 0, no thread pool is used and this done sequentially by the delivery thread instead.
system.numrepliers = 16

############################################
###### State Transfer Configurations #######
############################################

#Activate the state transfer protocol ('true' to activate, 'false' to de-activate)
system.totalordermulticast.state_transfer = true

#Maximum ahead-of-time message not discarded
system.totalordermulticast.highMark = 10000

#Maximum ahead-of-time message not discarded when the replica is still on EID 0 (after which the state transfer is triggered)
system.totalordermulticast.revival_highMark = 10

#Number of ahead-of-time messages necessary to trigger the state transfer after a request timeout occurs
system.totalordermulticast.timeout_highMark = 200

############################################
###### Log and Checkpoint Configurations ###
############################################

system.totalordermulticast.log = true
system.totalordermulticast.log_parallel = false
system.totalordermulticast.log_to_disk = false
system.totalordermulticast.sync_log = false

#Period at which BFT-SMaRt requests the state to the application (for the state transfer state protocol)
system.totalordermulticast.checkpoint_period = 1024
system.totalordermulticast.global_checkpoint_period = 120000

system.totalordermulticast.checkpoint_to_disk = false
system.totalordermulticast.sync_ckp = false


############################################
###### Reconfiguration Configurations ######
############################################

#Replicas ID for the initial view, separated by a comma.
# The number of replicas in this parameter should be equal to that specified in 'system.servers.num'
system.initial.view = 0,1,2,3,4,5,6

#The ID of the trust third party (TTP)
system.ttp.id = 7002

#This sets if the system will function in Byzantine or crash-only mode. Set to "true" to support Byzantine faults
system.bft = true


############################################
######## SSL/TLS Configurations   ##########
######## Author: Tulio A. Ribeiro ##########
############################################

#Enable or Disable SSL/TLS, default is true. If SSL/TLS is enabled, it will automatically disable 'useMAC' variable.
system.ssltls = true# Always true.

#Note that the standard TLS protocol version names used in the JDK(1.8) are:
#Possible options: 'SSLv3', 'TLSv1', 'TLSv1.1' and 'TLSv1.2'. 
#Prefer TLSv1.1 or TLSv1.2 instead the others. (Default is TLSv1.2.).
system.ssltls.protocol_version = TLSv1.2

#The command below generates the secret key file. It shall be stored into config/keysSSL_TLS/*
#If you need another password, it is necessary to change the variable SECRET at classes: 
#'ServerConnectionSSLTLS' and 'ServersCommunicationLayerSSLTLS' and generate the file with the new password. 
## * ##Elliptic Curve 
## * $keytool -genkey -keyalg EC -keysize 256 -alias bftsmartEC -keypass MySeCreT_2hMOygBwY  -keystore ./ecKeyPair_256.pkcs12 -dname "CN=BFT-SMaRT" 
## * $keytool -importkeystore -srckeystore ./ecKeyPair_256.pkcs12 -destkeystore ./ecKeyPair_256.pkcs12 -deststoretype pkcs12
## * 
## * ##RSA
## * $keytool -genkey -keyalg RSA -keysize 2048 -alias bftsmartRSA -keypass MySeCreT_2hMOygBwY  -keystore ./RSA_KeyPair_2048.pkcs12 -dname "CN=BFT-SMaRT"
## * $keytool -importkeystore -srckeystore ./RSA_KeyPair_2048.pkcs12 -destkeystore ./RSA_KeyPair_2048.pkcs12 -deststoretype pkcs12

#Cipher Suite list enabled by the server. NULL means, NoCipher.  
#ECDH(E) - Elliptic Curve Diffie-Hellman (Ephemeral) or Diffie-Hellman Ephemeral (DHE) it is the standard
#recommendation, in general, the recommendation is to use "Ephemeral". See https://ciphersuite.info/cs/
#The ciphers shall be separately by ",", if there is just one, put a "," at the end (without spaces). 

## ECDSA system.ssltls.key_store_file=EC_KeyPair_256.pkcs12 #system.ssltls.key_store_file=EC_KeyPair_384.pkcs12
system.ssltls.enabled_ciphers = TLS_ECDHE_ECDSA_WITH_NULL_SHA,
# With cipher (recommended).
#system.ssltls.enabled_ciphers = TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,

## NOTE: it is mandatory to use the specific keyPair file regarding the algorithm, see below.  
## TLS_ECDHE_ECDSA_WITH_*, // used with EC keyStore (EC_KeyPair_*.pkcs12).
## TLS_RSA_WITH_*, OR TLS_ECDHE_RSA_WITH_*,  // used with RSA keyStore (RSA_KeyPair_*.pkcs12).

## RSA #system.ssltls.key_store_file=RSA_KeyPair_1024.pkcs12 #system.ssltls.key_store_file=RSA_KeyPair_2048.pkcs12
#system.ssltls.enabled_ciphers = TLS_RSA_WITH_NULL_SHA256,
# With cipher (recommended)
##system.ssltls.enabled_ciphers = TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
#With cipher (secure)
##system.ssltls.enabled_ciphers = TLS_RSA_WITH_AES_128_GCM_SHA256,


